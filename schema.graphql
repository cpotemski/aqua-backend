# enums

enum ResourceType {
    Aluminium
    Steel
    Plutonium
}

enum ShipName {
    Piranha
    Jellyfish
    Shark
    HackBoat
    Taifun
    Blizzard
    Hurricane
    Tsunami
    Enterprise
    Bermuda
    KittyHawk
    Atlantis
}

enum ShipType {
    Normal
    Emp
    FirstStrike
}

enum BuildOrderType {
    Ship
    Harvester
}

enum FleetActionType {
    Attack
    Defend
}

# types

type Player {
    id:             String!
    name:           String!
    station:        Station
    fleets:         [Fleet!]
    incomingFleets: [Fleet!]
}

type PlayerContext {
    id:             String!
}

type Resources {
    id:             String
    aluminium:      Int
    steel:          Int
    plutonium:      Int
}

type Coordinates {
    id:             String
    x:              Int!
    y:              Int!
}

type Station {
    id:             String!
    name:           String!
    owner:          Player
    resources:      Resources!
    coordinates:    Coordinates!
    harvesters:     Int!
    distribution:   [Int!]!
}

type Fleet {
    id:             String!
    owner:          Player
    target:         Player
    baseFleet:      Boolean
    ships:          Ships!
    travelTime:     Int
    remainingTime:  Int
    actionTicks:    Int
    returning:      Boolean
}

type Ships {
    id:             String!
    piranha:        Int
    jellyfish:      Int
    shark:          Int
    hackboat:       Int
    taifun:         Int
    blizzard:       Int
    hurricane:      Int
    tsunami:        Int
    enterprise:     Int
    bermuda:        Int
    kittyhawk:      Int
    atlantis:       Int
}

type BuildOrder {
    id:             String!
    owner:          Player
    type:           BuildOrderType!
    what:           ShipName
    amount:         Int!
    remainingTime:  Int!
}

type Ship {
    name: ShipName!
    type: ShipType!
    costs: Resources!
    speed: Int!
    travelCosts: Int!
    health: Int!
    cannons: Int!
    firePower: Int!
    buildTime: Int!
}

type ResourceNode {
    id:              String!
    type:            ResourceType!
    coordinates:     Coordinates!
}

type ResourceNodeWithDistance {
    distance:       Float!
    type:           ResourceType!
    node:           ResourceNode!
}

# inputs

input RegistrationInput {
    id:             String!
    email:          String!
    name:           String!
    stationName:    String!
    coordinates:    CoordinatesInput!
}

input CoordinatesInput {
    x:              Int!
    y:              Int!
}

input BuildOrderInput {
    type:           BuildOrderType!
    what:           ShipName
    amount:         Int!
}

input HarvesterDistributionInput {
    distribution:   [Int!]!
}

input StartFleetInput {
    id: String!
    coordinates: CoordinatesInput!
    action: FleetActionType!
    actionTicks: Int!
}

# queries and mutations

type Query {
    me: PlayerContext!
    playerById(id: String!): Player
    players: [Player!]!
    buildOrders: [BuildOrder!]!
    shipData: [Ship!]!
    resourceNodes: [ResourceNode!]!
    stations: [Station!]!
    fleets: [Fleet!]!
    nearestResourceNodes(coordinates: CoordinatesInput!): [ResourceNodeWithDistance!]!
}

type Mutation {
    register(input: RegistrationInput!): Player!
    createBuildOrder(input: BuildOrderInput!): BuildOrder!
    createFleet: Fleet
    startFleet(input: StartFleetInput!): Fleet
    recallFleet(id: String!): Fleet
    deleteFleet(id: String!): Ships
    updateHarvesterDistribution(input: HarvesterDistributionInput!): Station!
}